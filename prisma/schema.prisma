// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int            @id @default(autoincrement())
  username            String         @unique
  email               String         @unique
  password            String
  profile             Profile?
  posts               Post[]
  comments            Comment[]
  likes               Like[]
  sentFriendships     Friendship[]   @relation("SentFriendships")
  receivedFriendships Friendship[]   @relation("ReceivedFriendships")
  messagesSent        Message[]      @relation("SentMessages")
  messagesReceived    Message[]      @relation("ReceivedMessages")
  notifications       Notification[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int
  requesteeId Int
  status      String // pending, accepted, rejected, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester User @relation("SentFriendships", fields: [requesterId], references: [id])
  requestee User @relation("ReceivedFriendships", fields: [requesteeId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
